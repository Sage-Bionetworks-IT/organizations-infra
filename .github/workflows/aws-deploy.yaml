name: aws-deploy

on:
  pull_request:
    branches: ['*']
  push:
    branches: [master]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: pre-commit/action@v2.0.0
  jinja-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install jinja libraries
        uses: BSFishy/pip-action@v1
        with:
          packages: jinja2==3.0.1
      - name: Install jinja linter tool
        run: git clone --single-branch https://github.com/drm/jinja2-lint.git /tmp/jinja2-lint
      - name: Execute jinja linter
        run: find . -type f -name "*.j2" -exec /tmp/jinja2-lint/j2lint.py '{}' +
  org-formation:
    if: github.event_name == 'push'
    needs:
      - pre-commit
      - jinja-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::531805629419:role/bootstrap-ci-service-access-CiServiceRole-VVXK9EUQNPUZ
          role-duration-seconds: 1200
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 15.x
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install dependencies
        run: npm install
      - name: Validate ofn templates
        run: npm run validate-tasks
      - name: Deploy with ofn
        run: npm run ci-perform-tasks
  sceptre-organizations:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::531805629419:role/bootstrap-ci-service-access-CiServiceRole-VVXK9EUQNPUZ
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/organizations
          mkdir -p templates/remote
          sceptre launch prod --yes
# Transit Gateway is still work in progress
#  sceptre-transit:
#    if: github.event_name == 'push'
#    needs: org-formation
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - name: Cache python modules
#        uses: actions/cache@v2
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install sceptre sceptre-ssm-resolver
#      - name: Assume AWS Role
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#          role-to-assume: arn:aws:iam::153370007719:role/OrganizationFormationBuildAccessRole
#          role-duration-seconds: 1200
#      - name: Deploy with sceptre
#        run: |
#          cd sceptre/transit
#          mkdir -p templates/remote
#          sceptre launch prod --yes
  sceptre-admincentral:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::745159704268:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/admincentral
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-itsandbox:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::804034162148:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/itsandbox
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-sandbox:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::563295687221:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/sandbox
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-scicomp:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::055273631518:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/scicomp
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-strides:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::423819316185:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/strides
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-scipooldev:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver sceptre-date-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::465877038949:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/scipool
          mkdir -p templates/remote
          sceptre launch develop --yes
  sceptre-scipoolprod:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver sceptre-date-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::237179673806:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        # SC-26 & SC-219 workaround: dis-associate and re-associate SC actions on every deploy
        run: |
          cd sceptre/scipool
          mkdir -p templates/remote
          sceptre delete --yes prod/sc-product-assoc-ec2-linux-docker.yaml
          sceptre delete --yes prod/sc-product-assoc-ec2-linux-jumpcloud-notebook.yaml
          sceptre delete --yes prod/sc-product-assoc-ec2-linux-windows-jumpcloud.yaml
          sceptre launch prod --yes
  sceptre-stridespool:
    if: github.event_name == 'push'
    needs:
      - org-formation
      - sceptre-strides
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver sceptre-date-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::423819316185:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        # SC-26 & SC-219 workaround: dis-associate and re-associate SC actions on every deploy
        run: |
          cd sceptre/scipool
          mkdir -p templates/remote
          sceptre delete --yes strides/sc-product-assoc-ec2-linux-docker.yaml
          sceptre delete --yes strides/sc-product-assoc-ec2-linux-jumpcloud-notebook.yaml
          sceptre delete --yes strides/sc-product-assoc-ec2-linux-windows-jumpcloud.yaml
          sceptre launch strides --yes
  sceptre-bmgfki:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver sceptre-date-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::464102568320:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        # SC-26 & SC-219 workaround: dis-associate and re-associate SC actions on every deploy
        run: |
          cd sceptre/scipool
          mkdir -p templates/remote
          sceptre delete --yes bmgfki/sc-product-assoc-ec2-linux-docker.yaml
          sceptre delete --yes bmgfki/sc-product-assoc-ec2-linux-jumpcloud-notebook.yaml
          sceptre delete --yes bmgfki/sc-product-assoc-ec2-linux-windows-jumpcloud.yaml
          sceptre launch bmgfki --yes
  sceptre-sageit:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::797640923903:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy staging with sceptre
        run: |
          cd $GITHUB_WORKSPACE/sceptre/sageit
          mkdir -p templates/remote
          sceptre launch staging --yes
      - name: Deploy prod with sceptre
        run: |
          cd $GITHUB_WORKSPACE/sceptre/sageit
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-logcentral:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
          pip install git+git://github.com/zaro0508/sceptre-identity-resolver.git
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::231505186444:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/logcentral
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-synapsedw:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::383874245509:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/synapsedw
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-synapsedev:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::449435941126:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/synapsedev
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-synapseprod:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::325565585839:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/synapseprod
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-securitycentral:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::140124849929:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/securitycentral
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-bridgedev:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::420786776710:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/bridge
          mkdir -p templates/remote
          sceptre launch develop --yes
  sceptre-bridgeprod:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::649232250620:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/bridge
          mkdir -p templates/remote
          sceptre launch prod --yes
  sceptre-imagecentral:
    if: github.event_name == 'push'
    needs: org-formation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sceptre sceptre-ssm-resolver
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_SERVICE_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_SERVICE_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::867686887310:role/OrganizationFormationBuildAccessRole
          role-duration-seconds: 1200
      - name: Deploy with sceptre
        run: |
          cd sceptre/imagecentral
          mkdir -p templates/remote
          sceptre launch prod --yes
