# Setup AWS Guardduty Malware Protection for S3 to scan and apply a pre-defined "GuardDutyMalwareScanStatus" tag
# to S3 objects with possible tag values ["NO_THREATS_FOUND","THREATS_FOUND","UNSUPPORTED","FAILED"] then send
# a Guardduty notification to an SNS topic.
# https://docs.aws.amazon.com/guardduty/latest/ug/tag-based-access-s3-malware-protection.html
#
# Note: The bucket being scanned should contain a bucket policy to restrict access to Malicious objects.
# https://docs.aws.amazon.com/guardduty/latest/ug/tag-based-access-s3-malware-protection.html#apply-tbac-s3-malware-protection

AWSTemplateFormatVersion: 2010-09-09
Description: Guardduty Malware protection plan for S3 bucket
Parameters:
  BucketName:
    Type: String
    Description: The bucket for Guardduty to scan
    ConstraintDescription: Name string (i.e. MyBucket)
  SnsTopicName:
    Type: String
    Description: The SNS topic name to send Guardduty findings to
    ConstraintDescription: SNS topic Arn (i.e. MySnsTopic)
Resources:
  MalwareProtectionPlan:
    Type: AWS::GuardDuty::MalwareProtectionPlan
    Properties:
      Actions:
        Tagging:
          Status: ENABLED
      ProtectedResource:
        S3Bucket:
          BucketName: !Ref BucketName
      Role: !GetAtt Role.Arn

  # role & policy from https://docs.aws.amazon.com/guardduty/latest/ug/malware-protection-s3-iam-policy-prerequisite.html
  Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ManagedPolicy
      AssumeRolePolicyDocument:
       Version: 2012-10-17
       Statement:
          - Sid: AllowTrustToGuardDutyProtectionPlan
            Effect: Allow
            Principal:
              Service: malware-protection-plan.guardduty.amazonaws.com
            Action: 'sts:AssumeRole'
  ManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowManagedRuleToSendS3EventsToGuardDuty
            Effect: Allow
            Action:
              - 'events:PutRule'
              - 'events:DeleteRule'
              - 'events:PutTargets'
              - 'events:RemoveTargets'
            Resource:
              - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*'
            Condition:
              StringLike:
                'events:ManagedBy': malware-protection-plan.guardduty.amazonaws.com
          - Sid: AllowGuardDutyToMonitorEventBridgeManagedRule
            Effect: Allow
            Action:
              - 'events:DescribeRule'
              - 'events:ListTargetsByRule'
            Resource:
              - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*'
          - Sid: AllowPostScanTag
            Effect: Allow
            Action:
              - 's3:PutObjectTagging'
              - 's3:GetObjectTagging'
              - 's3:PutObjectVersionTagging'
              - 's3:GetObjectVersionTagging'
            Resource:
              - !Sub 'arn:aws:s3:::${BucketName}/*'
          - Sid: AllowEnableS3EventBridgeEvents
            Effect: Allow
            Action:
              - 's3:PutBucketNotification'
              - 's3:GetBucketNotification'
            Resource:
              - !Sub 'arn:aws:s3:::${BucketName}'
          - Sid: AllowPutValidationObject
            Effect: Allow
            Action:
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:aws:s3:::${BucketName}/malware-protection-resource-validation-object'
          - Sid: AllowCheckBucketOwnership
            Effect: Allow
            Action:
              - 's3:ListBucket'
            Resource:
              - !Sub 'arn:aws:s3:::${BucketName}'
          - Sid: AllowMalwareScan
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
            Resource:
              - !Sub 'arn:aws:s3:::${BucketName}/*'
          - Sid: AllowDecryptForMalwareScan
            Effect: Allow
            Action:
              - 'kms:GenerateDataKey'
              - 'kms:Decrypt'
            Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'   # bucket is encrypted using an AWS KMS key
            Condition:
              StringLike:
                'kms:ViaService': s3.us-east-1.amazonaws.com
  GuarddutyFindingsRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
      Targets:
        - Id: NotificationTopic
          Arn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SnsTopicName}'
      State: ENABLED
Outputs:
  SnsTopic:
    Value: !Ref SnsTopic
    Export:
      Name: !Sub '${AWS::StackName}-SnsTopic'
