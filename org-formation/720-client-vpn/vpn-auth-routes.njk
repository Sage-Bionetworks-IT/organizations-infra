Description: Setup client VPN authorization and routes
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ClientVpnEndpointId:
    Type: String
    Description: The ID of the VPN Endpoint
Resources:
{% for subnet_id in SubnetIds %}
  EndpointAssociation{{ subnet_id | last }}:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpointId
      SubnetId: {{ subnet_id }}
{% endfor %}

{# Authorization and route between VPN and public internet #}
  EndpointAuthorizationPublic:
    Condition: FullTunnel
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties:
      Description: "public"
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVpnEndpointId
      TargetNetworkCidr: "0.0.0.0/0"

{% for subnet_id in SubnetIds %}
  EndpointRoutePublicSubnet{{ subnet_id | last }}:
    Condition: FullTunnel
    Type: AWS::EC2::ClientVpnRoute
    Properties:
      Description: public-subnet{{ subnet_id | last }}
      ClientVpnEndpointId: !Ref ClientVpnEndpointId
      DestinationCidrBlock: "0.0.0.0/0"
      TargetVpcSubnetId: {{ subnet_id }}
{% endfor %}

{# Authorization and routes between VPN and spokes #}
{% for spoke, spoke_data in TgwSpokes %}
{%   set spoke_loop = loop %}
{%   for access_group in spoke_data.AccessGroups %}
{%     set access_group_loop = loop %}
  EndpointAuthorization{{ spoke_loop.index }}{{ access_group_loop.index }}:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    DependsOn:
{%     for subnet_id in SubnetIds %}
      - EndpointAssociation{{ subnet_id | last }}
{%     endfor %}
    Properties:
      Description: {{ spoke }}-{{ access_group }}
      AccessGroupId: {{ access_group }}
      ClientVpnEndpointId: !Ref ClientVpnEndpointId
      TargetNetworkCidr: {{ spoke_data.CIDR }}
{%   endfor %}
{% endfor %}

{% for spoke, spoke_data in TgwSpokes %}
{%   set spoke_loop = loop %}
{%   for subnet_id in SubnetIds %}
{%     set subnet_id_loop = loop %}
  EndpointRoute{{ spoke_loop.index }}{{ subnet_id_loop.index }}:
    Type: AWS::EC2::ClientVpnRoute
    DependsOn:
{%     for depend in SubnetIds %}
      - EndpointAssociation{{ subnet_id | last }}
{%     endfor %}
    Properties:
      Description: {{ spoke }}-Subnet{{ subnet_id | last }}
      ClientVpnEndpointId: !Ref ClientVpnEndpointId
      DestinationCidrBlock: {{ spoke_data.CIDR }}
      TargetVpcSubnetId: {{ subnet_id }}
{%   endfor %}
{% endfor %}
