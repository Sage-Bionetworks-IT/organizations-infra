AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  VPC for a Transit Gateway
Parameters:
  VpcSubnetPrefix:
    Description: The VPC subnet prefix (i.e. 10.40)
    Type: String
Mappings:
  SubnetConfig:
    VPC:
      CIDR: "0.0/16"
    SubnetA:  # private
      CIDR: "1.0/24"
    SubnetB:  # private
      CIDR: "2.0/24"
    SubnetC:  # private
      CIDR: "3.0/24"
#    SubnetD:  # public
#      CIDR: "100.0/24"
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, VPC, CIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
#  InternetGateway:
#    Type: "AWS::EC2::InternetGateway"
#  GatewayToInternet:
#    Type: "AWS::EC2::VPCGatewayAttachment"
#    Properties:
#      VpcId: !Ref VPC
#      InternetGatewayId: !Ref InternetGateway
#  PublicRouteTable:
#    Type: "AWS::EC2::RouteTable"
#    Properties:
#      VpcId: !Ref VPC
#  PublicRoute:
#    Type: "AWS::EC2::Route"
#    DependsOn: "GatewayToInternet"
#    Properties:
#      RouteTableId: !Ref PublicRouteTable
#      DestinationCidrBlock: "0.0.0.0/0"
#      GatewayId: !Ref InternetGateway
  SubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, SubnetA, CIDR]
      VpcId: !Ref VPC
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, SubnetB, CIDR]
      VpcId: !Ref VPC
  SubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '' ]
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, SubnetC, CIDR]
      VpcId: !Ref VPC
#  SubnetD:
#    Type: "AWS::EC2::Subnet"
#    Properties:
#      AvailabilityZone: !Select [3, !GetAZs '']
#      CidrBlock: !Join
#        - '.'
#        - - !Ref VpcSubnetPrefix
#          - !FindInMap [SubnetConfig, SubnetD, CIDR]
#      VpcId: !Ref VPC
#      MapPublicIpOnLaunch: true
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  SubnetRouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "SubnetA"
      RouteTableId: !Ref PrivateRouteTable
  SubnetRouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "SubnetB"
      RouteTableId: !Ref PrivateRouteTable
  SubnetRouteTableAssociationC:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "SubnetC"
      RouteTableId: !Ref PrivateRouteTable
#  SubnetRouteTableAssociationD:
#    Type: "AWS::EC2::SubnetRouteTableAssociation"
#    Properties:
#      SubnetId: !Ref SubnetD
#      RouteTableId: !Ref PublicRouteTable
#  ElasticIP:
#    Type: "AWS::EC2::EIP"
#    Properties:
#      Domain: "vpc"
#  NATGateway:
#    Type: "AWS::EC2::NatGateway"
#    Properties:
#      AllocationId: !GetAtt ElasticIP.AllocationId
#      SubnetId: !Ref SubnetD
#  PrivateRouteToInternet:
#    Type: "AWS::EC2::Route"
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable
#      DestinationCidrBlock: "0.0.0.0/0"
#      NatGatewayId: !Ref NATGateway
#  PublicNetworkAcl:
#    Type: "AWS::EC2::NetworkAcl"
#    Properties:
#      VpcId: !Ref VPC
#  PublicSubnetNetworkAclAssociation:
#    Type: "AWS::EC2::SubnetNetworkAclAssociation"
#    Properties:
#      SubnetId: !Ref SubnetD
#      NetworkAclId: !Ref PublicNetworkAcl
#  InboundPublicNetworkAclEntry:
#    Type: "AWS::EC2::NetworkAclEntry"
#    Properties:
#      NetworkAclId: !Ref PublicNetworkAcl
#      RuleNumber: 100
#      Protocol: -1
#      RuleAction: "allow"
#      Egress: false
#      CidrBlock: "0.0.0.0/0"
#      PortRange:
#        From: 0
#        To: 65535
#  OutboundPublicNetworkAclEntry:
#    Type: "AWS::EC2::NetworkAclEntry"
#    Properties:
#      NetworkAclId: !Ref PublicNetworkAcl
#      RuleNumber: 100
#      Protocol: -1
#      RuleAction: "allow"
#      Egress: true
#      CidrBlock: "0.0.0.0/0"
#      PortRange:
#        From: 0
#        To: 65535
Outputs:
  SubnetIDs:
    Description: "VPC Subnet IDs"
    Value: !Sub '${SubnetA}, ${SubnetB}, ${SubnetC}'
    Export:
      Name: !Sub '${AWS::StackName}-SubnetIDs'
  SubnetA:
    Description: "VPC Subnet A"
    Value: !Ref SubnetA
    Export:
      Name: !Sub '${AWS::StackName}-SubnetA'
  SubnetB:
    Description: "VPC Subnet B"
    Value: !Ref SubnetB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetB'
  SubnetC:
    Description: "VPC Subnet C"
    Value: !Ref SubnetC
    Export:
      Name: !Sub '${AWS::StackName}-SubnetC'
#  SubnetD:
#    Description: "VPC Subnet D"
#    Value: !Ref SubnetD
#    Export:
#      Name: !Sub '${AWS::StackName}-SubnetD'
  VpcId:
    Description: "The VPC ID"
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'
  PrivateRouteTableId:
    Description: "The VPC private route table ID"
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PrivateRouteTableId'
#  PublicRouteTableId:
#    Description: "The VPC public route table ID"
#    Value: !Ref PublicRouteTable
#    Export:
#      Name: !Sub '${AWS::StackName}-PublicRouteTableId'
#  NATGatewayId:
#    Description: "The NAT Gateway ID"
#    Value: !Ref NATGateway
#    Export:
#      Name: !Sub '${AWS::StackName}-NATGatewayId'
