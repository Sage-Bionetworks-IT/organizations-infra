# Based off of https://github.com/aws-samples/aws-lambda-efs-samples
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda to run a docker container
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Container Image
        Parameters:
          - ImageUri
          - EntryPoints
          - Command
          - WorkingDirectory
          - MemorySize
      - Label:
          default: Synapse
        Parameters:
          - SynapsePAT
      - Label:
          default: Execution Trigger
        Parameters:
          - EnableSchedule
          - Schedule
      - Label:
          default: EFS
        Parameters:
          - PerformanceMode
          - Encrypted
          - EfsPath
Parameters:
  PerformanceMode:
    Type: String
    Default: "generalPurpose"
    Description: The EFS disk performance mode
    AllowedValues:
      - generalPurpose
      - maxIO
  Encrypted:
    Type: String
    Default: true
    Description: True to enable EFS encryption, false to disable.
    AllowedValues:
      - true
      - false
  EfsPath:
    Type: String
    Description: Path to access EFS file store.
    Default: /mnt/efs
  MemorySize:
    Type: Number
    MinValue: 1024
    MaxValue: 10240
    Default: 1024
    Description: >
      The amount of memory (in MB) available to the function at runtime.
      Increasing the function's memory also increases its CPU allocation.
  ImageUri:
    Type: String
    Description: >
      The URI of the Amazon ECR repository for the Lambda function's container image.
      Example: 111111111.dkr.ecr.us-east-1.amazonaws.com/MY-DOCKER:latest
  EntryPoints:
    Type: CommaDelimitedList
    Default: ""
    Description: (Optional) Comma separated list of entry points to docker container
  Command:
    Type: CommaDelimitedList
    Default: ""
    Description: (Optional) Comma separated list of parameters to pass in with docker ENTRYPOINT
  WorkingDirectory:
    Type: String
    Default: ""
    Description: (Optional) The working directory for the docker container
  EnableSchedule:
    Description: >
      true to run on a schedule, false to disable. If enabled a valid Schedule must be provided
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  Schedule:
    Description: >
      Schedule to execute the docker, can be a rate or a cron schedule. Format at
      https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
    Type: String
    Default: cron(0 09 ? * MON *)  # Run every Monday at 9am
    ConstraintDescription: "Use schedule format: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html"
  SynapsePAT:
    Type: String
    NoEcho: true
    Default: ""
    Description: >
      (Optional) The Synapse personal access token (PAT).
      https://docs.synapse.org/rest/POST/personalAccessToken.html
Conditions:
  HasEntryPoints: !Not
    - !Equals
      - !Join [ "", !Ref EntryPoints ]
      - ''
  HasCommand: !Not
    - !Equals
      - !Join ["", !Ref Command]
      - ''
  HasWorkingDirectory: !Not [!Equals [!Ref WorkingDirectory, ""]]
  HasSynapsePAT: !Not [!Equals [!Ref SynapsePAT, ""]]
Resources:
  FileSystemResource:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: !Ref PerformanceMode
      Encrypted: !Ref Encrypted
  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !ImportValue {'Fn::Sub': '${AWS::Region}-docker-runner-vpc-MountTargetSubnet'}
      SecurityGroups: [!ImportValue {'Fn::Sub': '${AWS::Region}-docker-runner-vpc-DefaultSecurityGroup'}]
  AccessPoint:
    DependsOn: [MountTarget]
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref FileSystemResource
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0777"
        Path: !Ref EfsPath
  EfsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AmazonElasticFileSystemClientFullAccess
            Effect: Allow
            Action:
              - elasticfilesystem:ClientMount
              - elasticfilesystem:ClientRootAccess
              - elasticfilesystem:ClientWrite
              - elasticfilesystem:DescribeMountTargets
            Resource: !GetAtt FileSystemResource.Arn
  DockerRunnerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 900
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: !If [HasCommand, !Ref Command, !Ref 'AWS::NoValue']
        EntryPoint: !If [HasEntryPoints, !Ref EntryPoints, !Ref 'AWS::NoValue']
        WorkingDirectory: !If [HasWorkingDirectory, !Ref WorkingDirectory, !Ref 'AWS::NoValue']
      MemorySize: !Ref MemorySize
      KmsKeyArn: !ImportValue {'Fn::Sub': '${AWS::Region}-docker-runner-kms-key-KmsKeyArn'}
      Environment:
        Variables:
          EFS_PATH: !Ref EfsPath
          SYNAPSE_PAT: !If [HasSynapsePAT, !Ref SynapsePAT, !Ref 'AWS::NoValue']
      Events:
        RecurringSchedule:
          Type: Schedule
          Properties:
            Schedule: !Ref Schedule
            Enabled: !Ref EnableSchedule
        DockerRunner:
          Type: Api
          Properties:
            Path: /run
            Method: get
      VpcConfig:
        SecurityGroupIds: [!ImportValue {'Fn::Sub': '${AWS::Region}-docker-runner-vpc-DefaultSecurityGroup'}]
        SubnetIds: [!ImportValue {'Fn::Sub': '${AWS::Region}-docker-runner-vpc-MountTargetSubnet'}]
      FileSystemConfigs:
        - Arn: !GetAtt AccessPoint.Arn
          LocalMountPath: !Ref EfsPath
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref EfsPolicy
Outputs:
  DockerRunnerApi:
    Description: "API Gateway endpoint URL for Prod stage for Docker Runner function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/run/"
  DockerRunnerFunction:
    Description: "Docker Runner Lambda Function ARN"
    Value: !GetAtt DockerRunnerFunction.Arn
  DockerRunnerFunctionIamRole:
    Description: "Implicit IAM Role created for Docker Runner function"
    Value: !GetAtt DockerRunnerFunctionRole.Arn
  EfsPath:
    Value: !Ref EfsPath
