Description: Common resources for AWS account
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AwsDefaultVpcId:
    Description: The AWS account's default VPC id
    Type: AWS::EC2::VPC::Id
  AwsAccount:
    Type: String
    Default: develop
    AllowedValues:
      - prod
      - develop
    ConstraintDescription: must specify develop or prod.
  NewRelicAccountId:
    Type: String
    NoEcho: true
  NewRelicExternalId:
    Type: String
    NoEcho: true
  OperatorEmail:
    Type: String
  VpcPeeringRequesterAwsAccountId:
    Type: String
    NoEcho: true
    Description: The AWS account running the Sophos-VPN
    AllowedPattern: '[0-9]*'
    ConstraintDescription: Must be account number without dashes
  CentralCloudtrailBucket:
    Type: String
    Description: The central S3 bucket where AWS CloudTrail send logs to.
    Default: essentials-awss3cloudtrailbucket-1jz6pf8dzid7r
Conditions:
  CreateProdResources: !Equals [ !Ref AwsAccount, prod ]
Resources:
  # !! IMPORTANT !! - AWS API will refuse to remove users that have attached resources.
  # Therefore you must do the following before deleting them from this file:
  # 1. Detach or remove the following user resources: login profile, attached
  #    MFA device, access-keys, ssh-keys, and policies.
  # 2. Detach the user from all groups.
  AWSIAMiOSBucketManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ListBucketAccess
            Action:
              - 's3:ListAllMyBuckets'
            Effect: Allow
            Resource: "arn:aws:s3:::*"
          - Sid: LocationBucketAccess
            Action:
              - 's3:ListBucket'
              - 's3:GetBucketLocation'
            Effect: Allow
            Resource: "arn:aws:s3:::ios-apps.sagebridge.org"
          - Sid: BucketObjectAccess
            Action:
              - 's3:PutObject'
              - 's3:PutObjectAcl'
              - 's3:GetObject'
              - 's3:GetObjectAcl'
              - 's3:DeleteObject'
            Effect: Allow
            Resource: "arn:aws:s3:::ios-apps.sagebridge.org/*"
  # resources for logging services
  AWSIAMSumoLogicUser:
    Type: 'AWS::IAM::User'
    Properties:
      Groups:
        - !Ref AWSIAMLoggingServiceGroup
  AWSIAMSumoLogicUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref AWSIAMSumoLogicUser
  IAMLoggingServiceManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:ListBucketVersions'
              - 's3:ListBucket'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::elasticbeanstalk-'
                  - !Ref AWS::Region
                  - '-'
                  - !Ref AWS::AccountId
                  - '/*'
              - !Join
                - ''
                - - 'arn:aws:s3:::elasticbeanstalk-'
                  - !Ref AWS::Region
                  - '-'
                  - !Ref AWS::AccountId
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AWSS3CloudtrailBucket
                  - '/*'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AWSS3CloudtrailBucket
  AWSIAMLoggingServiceGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      ManagedPolicyArns:
        - !Ref IAMLoggingServiceManagedPolicy
  AWSIAMNewRelicRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "cloudtrail.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref AWSIAMCloudtrailLogManagedPolicy
  # resources for app monitoring services
  AWSIAMNewRelicBudgetPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "NewRelicBudgetPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "budgets:ViewBudget"
            Resource: "*"
      Roles:
        -
          Ref: AWSIAMNewRelicInfrastructureServiceRole
  AWSIAMNewRelicInfrastructureServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref NewRelicAccountId
                    - ':root'
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                sts:ExternalId: !Ref NewRelicExternalId
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/ReadOnlyAccess'
  # resources for cloudtrail
  AWSLogsCloudtrailLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/aws/cloudtrail/${AWS::StackName}.log'
      RetentionInDays: 90
  AWSS3CloudtrailBucket:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
          - W3011
    DeletionPolicy: Retain
    Type: "AWS::S3::Bucket"
    Properties: {}
  AWSIAMS3CloudtrailBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref AWSS3CloudtrailBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource:
              !Sub |-
                arn:aws:s3:::${AWSS3CloudtrailBucket}
          -
            Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub |-
                arn:aws:s3:::${AWSS3CloudtrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"
  AWSSNSCloudtrailTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSSNSCloudtrailTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      Topics:
        - !Ref AWSSNSCloudtrailTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "CloudtrailTopicPolicy"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Resource: "*"
            Action: "SNS:Publish"
  AWSIAMCloudtrailLogManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSCloudTrailCreateLogStream
            Effect: Allow
            Action:
              - 'logs:CreateLogStream'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWSLogsCloudtrailLogGroup}:log-stream:${AWS::AccountId}_CloudTrail_${AWS::Region}*'
          - Sid: AWSCloudTrailPutLogEvents
            Effect: Allow
            Action:
              - 'logs:PutLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWSLogsCloudtrailLogGroup}:log-stream:${AWS::AccountId}_CloudTrail_${AWS::Region}*'
  AWSIAMCloudtrailLogRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "cloudtrail.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref AWSIAMCloudtrailLogManagedPolicy
  AWSCloudtrailTrail:
    DependsOn:
      - AWSIAMS3CloudtrailBucketPolicy
      - AWSSNSCloudtrailTopicPolicy
    Type: "AWS::CloudTrail::Trail"
    Properties:
      CloudWatchLogsLogGroupArn: !GetAtt AWSLogsCloudtrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt AWSIAMCloudtrailLogRole.Arn
      # send all logs to cloudtrail bucket in AWS logcentral account
      S3BucketName: !Ref CentralCloudtrailBucket
      SnsTopicName: !GetAtt AWSSNSCloudtrailTopic.TopicName
      IsLogging: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
  # AWS Config service, https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/Config/Config.yaml
  AWSConfigConfigurationRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
      RoleARN: !GetAtt [AWSIAMConfigRole, Arn]
  AWSConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Six_Hours
      # Send log and data to AWS logcentral account
      S3BucketName: "essentials-awss3configbucket-9n8wjykhvr5z"
  AWSS3ConfigBucket:
    Type: AWS::S3::Bucket
  AWSSnsConfigTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSSnsConfigTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: ConfigTopicPolicy
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: config.amazonaws.com
          Action: SNS:Publish
          Resource: '*'
      Topics: [!Ref 'AWSSnsConfigTopic']
  AWSIAMConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [config.amazonaws.com]
          Action: ['sts:AssumeRole']
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSConfigRole']
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:GetBucketAcl
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'AWSS3ConfigBucket']]
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'AWSS3ConfigBucket', /AWSLogs/,
                !Ref 'AWS::AccountId', /*]]
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Effect: Allow
            Action: config:Put*
            Resource: '*'
  # https://docs.aws.amazon.com/config/latest/developerguide/cloudtrail-enabled.html
  AWSConfigCloudtrailEnabledConfigRule:
    Type: 'AWS::Config::ConfigRule'
    DependsOn: AWSConfigConfigurationRecorder
    Properties:
      Description: Checks whether AWS CloudTrail is enabled.
      InputParameters:
        # logs and data are in AWS logcentral account
        s3BucketName: !Ref CentralCloudtrailBucket
        snsTopicArn: !Ref AWSSNSCloudtrailTopic
        cloudWatchLogsLogGroupArn: !GetAtt AWSLogsCloudtrailLogGroup.Arn
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENABLED
      MaximumExecutionFrequency: TwentyFour_Hours
  # dynamodb monitoring resources
  AWSSNSDynamoTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSCWDynmoGetRecordsErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSDynamoTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: SystemErrors
      Namespace: AWS/DynamoDB
      Dimensions:
        -
          "Name": "Operation"
          "Value": "GetRecords"
      Period: 900
      Statistic: Maximum
      Threshold: 10
      TreatMissingData: notBreaching
  AWSCWDynamoDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - DynamoDashboard
      DashboardBody: !Join
        - ''
        - - >-
            {"widgets": [
            {"type":"metric", "x":0, "y":0, "width":12, "height":6, "properties":
            {"metrics":[
            [ "AWS/DynamoDB", "SystemErrors", "Operation", "GetRecords", {"stat": "Sum"}]],
            "view": "timeSeries", "stacked": true, "period":300, "stat":"Sum",
            "region":"us-east-1", "title":"DynamoErrors"}}]}
  # SMS monitoring resources
  AWSSNSSmsTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSCWSmsNumberOfNotificationsFailedAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSSmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 5
      EvaluationPeriods: 1
      MetricName: NumberOfNotificationsFailed
      Namespace: AWS/SNS
      Dimensions:
        -
          "Name": "PhoneNumber"
          "Value": "PhoneNumberDirect"
      Period: 3600
      Statistic: Average
      TreatMissingData: notBreaching
  AWSCWSmsSpendingdAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSSmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 24
      EvaluationPeriods: 1
      MetricName: SMSMonthToDateSpentUSD
      Namespace: AWS/SNS
      Period: 300
      Statistic: Maximum
      TreatMissingData: notBreaching
  AWSCWDirectPublishToPhoneNumberFailureAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSSmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 3
      EvaluationPeriods: 12
      Namespace: AWS/Logs
      MetricName: DirectPublishToPhoneNumberFailure
      Dimensions:
        -
          "Name": "LogGroupName"
          "Value": !Join
            - '/'
            - - 'sns'
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - 'DirectPublishToPhoneNumber/Failure'
      Period: 300
      Statistic: Average
      TreatMissingData: notBreaching
  AWSCWSmsDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - SmsDashboard
      DashboardBody: !Join
        - ''
        - - >-
            {"widgets": [{ "type":"metric", "x":0, "y":0, "width":12,
            "height":6, "properties":{"metrics":[[ "AWS/SNS",
            "SMSMonthToDateSpentUSD", {"stat": "Maximum"}]],
          - >-
            "view": "timeSeries", "stacked": true, "period":300,
            "stat":"Average", "region":"us-east-1",
            "title":"SMSMonthToDateSpentUSD"}},
          - >-
            {"type":"metric", "x":0, "y":0, "width":12, "height":6,
            "properties":{"metrics":[[ "AWS/SNS", "NumberOfNotificationsFailed",
            "PhoneNumber","PhoneNumberDirect
          - '", {"stat": "Average"}]],'
          - >-
            "view": "timeSeries", "stacked": true, "period":300,
            "region":"us-east-1", "title":"NumberOfNotificationsFailed"}},
          - >-
            {"type":"metric", "x":0, "y":0, "width":12, "height":6,
            "properties":{"metrics":[[ "AWS/Logs", "DirectPublishToPhoneNumberFailure",
            "LogGroupName","
          - !Join [ "/", [ "sns", !Ref "AWS::Region", !Ref "AWS::AccountId", "DirectPublishToPhoneNumber/Failure" ] ]
          - '", {"stat": "Average"}]],'
          - >-
            "view": "timeSeries", "stacked": true, "period":300,
            "region":"us-east-1", "title":"DirectPublishToPhoneNumberFailure"}}]}
  # S3 bucket for android apps
  AWSS3AndroidAppBucket:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
          - W3011
    Type: AWS::S3::Bucket
    Condition: CreateProdResources
    Properties:
      AccessControl: PublicRead
      BucketName: android-apps.sagebridge.org
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain
  # Create a role to authorize the VPC Peering request from a specific account,
  # this is used to create the VPC Peer between different accounts in  CloudFormation
  # https://github.com/awslabs/aws-cloudformation-templates/tree/master/aws/solutions/VPCPeering
  VPCPeeringAuthorizerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref VpcPeeringRequesterAwsAccountId
                  - ':root'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: VPCAuthorizer
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AcceptVpcPeeringConnection'
                Resource:
                  - '*'
  # Security group to allow VPN users access to aws resources
  VpnSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for VPN
      VpcId: !Ref AwsDefaultVpcId
      SecurityGroupIngress:
        - CidrIp: "10.1.0.0/16"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
          Description: "Allow all VPN traffic"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
  # Allow access to bastian hosts
  BastianSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for bastians
      VpcId:
        Ref: "AwsDefaultVpcId"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          Description: "Allow SSH connection"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
Outputs:
  AwsDefaultVpcId:
    Value: !Ref AwsDefaultVpcId
    Export:
      Name: !Sub '${AWS::StackName}-AwsDefaultVpcId'
  AWSIAMSumoLogicUser:
    Value: !Ref AWSIAMSumoLogicUser
    Export:
      Name: !Sub '${AWS::StackName}-SumoLogicUser'
  AWSIAMSumoLogicUserAccessKey:
    Value: !Ref AWSIAMSumoLogicUserAccessKey
    Export:
      Name: !Sub '${AWS::StackName}-SumoLogicUserAccessKey'
  AWSS3CloudtrailBucket:
    Value: !Ref AWSS3CloudtrailBucket
    Export:
      Name: !Sub '${AWS::StackName}-CloudtrailBucket'
  AWSS3AndroidAppBucketWebsiteURL:
    Condition: CreateProdResources
    Value: !GetAtt AWSS3AndroidAppBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-AndroidAppBucketWebsiteURL'
  AWSS3AndroidAppBucketSecureURL:
    Condition: CreateProdResources
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt AWSS3AndroidAppBucket.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-AndroidAppBucketSecureURL'
  VPCPeeringAuthorizerRole:
    Description: Cross Account Role Name
    Value: !Ref VPCPeeringAuthorizerRole
    Export:
      Name: !Sub '${AWS::StackName}-VPCPeeringAuthorizerRole'
  VpnSecurityGroup:
    Value: !Ref VpnSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-VpnSecurityGroup'
  BastianSecurityGroup:
    Description: "Bastian Security Group Id"
    Value: !Ref BastianSecurityGroup
    Export:
      Name:
        !Join ['-', [!Sub '${AWS::StackName}', 'BastianSecurityGroup']]
